From HB Require Import structures.
From mathcomp Require Import all_ssreflect all_algebra fingroup finalg matrix.
From mathcomp Require Import Rstruct ring boolp finmap matrix lra.
Require Import realType_ext realType_ln ssr_ext ssralg_ext bigop_ext fdist.
Require Import proba jfdist_cond entropy graphoid smc_interpreter smc_tactics.
Require Import smc_proba homomorphic_encryption dsdp_program.

Import GRing.Theory.
Import Num.Theory.

(******************************************************************************)
(*                                                                            *)
(* Formalization of:                                                          *)
(*                                                                            *)
(* Dumas, J. G., Lafourcade, P., Orfila, J. B., & Puys, M. (2017).            *)
(* Dual protocols for private multi-party matrix multiplication               *)
(* and trust computations.                                                    *)
(* Computers & security, 71, 51-70.                                           *)
(*                                                                            *)
(******************************************************************************)

Set Implicit Arguments.
Unset Strict Implicit.
Import Prenex Implicits.

Local Open Scope ring_scope.
Local Open Scope reals_ext_scope.
Local Open Scope proba_scope.
Local Open Scope fdist_scope.
Local Open Scope entropy_scope.
Local Open Scope vec_ext_scope.

Local Definition R := Rdefinitions.R.

Reserved Notation "u *h w" (at level 40).
Reserved Notation "u ^h w" (at level 40).

Section dsdp_privacy_analysis.
  
Variable T : finType.
Variable P : R.-fdist T.

(* If A is const-RV actually P |= A _|_ A.
   But in the DSDP setting, we don't have such RVs.
*)
Hypothesis neg_self_indep : forall (TA : finType)
  (A : {RV P -> TA}), ~ P |= A _|_ A.

Variable m_minus_2 : nat.
Local Notation m := m_minus_2.+2.

Let msg := 'I_m.  (* = Z/mZ *)
Let card_msg : #|msg| = m.
Proof. by rewrite card_ord. Qed.

Let enc := enc party msg.
Let pkey := pkey party msg.

Let data := (msg + enc + pkey)%type.
Let d x : data := inl (inl x).
Let e x : data := inl (inr x).
Let k x : data := inr x.

Notation dsdp_traceT := (15.-bseq data).
Notation dsdp_tracesT := (3.-tuple dsdp_traceT).
Notation "u *h w" := (Emul u w).
Notation "u ^h w" := (Epow u w).

Definition dsdp_uncurry (o: Alice.-key Dec msg * Bob.-key Dec msg *
  Charlie.-key Dec msg * msg * msg * msg * msg * msg * msg * msg * msg)
  : dsdp_tracesT :=
  let '(dk_a, dk_b, dk_c, v1, v2 , v3, u1, u2, u3, r2, r3) := o in
  (dsdp_traces dk_a.2 dk_b.2 dk_c.2 v1 v2 v3 u1 u2 u3 r2 r3).

Record dsdp_random_inputs :=
  DSDPRandomInputs {
    Dk_a : {RV P -> Alice.-key Dec msg};
    Dk_b : {RV P -> Bob.-key Dec msg};
    Dk_c : {RV P -> Charlie.-key Dec msg};

    V1 : {RV P -> msg};
    V2 : {RV P -> msg};
    V3 : {RV P -> msg};
    U1 : {RV P -> msg};
    U2 : {RV P -> msg};
    U3 : {RV P -> msg};
    R2 : {RV P -> msg};
    R3 : {RV P -> msg};

    alice_indep : P |= [% Dk_a, V1, U1, U2, U3, R2, R3] _|_ [% V2, V3];

    pV1_unif : `p_ V1 = fdist_uniform card_msg;
    pV2_unif : `p_ V2 = fdist_uniform card_msg;
    pV3_unif : `p_ V3 = fdist_uniform card_msg;
    pU2_unif : `p_ U2 = fdist_uniform card_msg;
    pU3_unif : `p_ U3 = fdist_uniform card_msg;
    pR2_unif : `p_ R2 = fdist_uniform card_msg;
    pR3_unif : `p_ R3 = fdist_uniform card_msg;
}.

Variable inputs : dsdp_random_inputs.

Let Dk_a := Dk_a inputs.
Let Dk_b := Dk_b inputs.
Let Dk_c := Dk_c inputs.
Let V1 := V1 inputs.
Let V2 := V2 inputs.
Let V3 := V3 inputs.
Let U1 := U1 inputs.
Let U2 := U2 inputs.
Let U3 := U3 inputs.
Let R2 := R2 inputs.
Let R3 := R3 inputs.
Let VU2 : {RV P -> msg} := V2 \* U2.
Let VU3 : {RV P -> msg} := V3 \* U3.
Let D2  : {RV P -> msg} := VU2 \+ R2.
Let VU3R : {RV P -> msg} := VU3 \+ R3.
Let D3 : {RV P -> msg} := VU3R \+ D2.
Let S : {RV P -> msg} := D3 \- R2 \- R3 \+ U1 \* V1.

Let E_alice_d3 : {RV P -> Alice.-enc msg} := E' alice `o D3.
Let E_charlie_v3 : {RV P -> Charlie.-enc msg} := E' charlie `o V3.
Let E_bob_v2 : {RV P -> Bob.-enc msg} := E' bob `o V2.

(* Use these two and apply_inde_RV_comp to prove trivial indeps*)
Let alice_inputsT := (Alice.-key Dec msg * msg * msg * msg *
  msg * msg * msg)%type.
Let AliceInputsView : {RV P -> alice_inputsT} := [% Dk_a, V1, U1, U2, U3, R2, R3].

(* Since `AliceInputView` are generated by Alice,
   while `v2` is generated by Bob *)
Hypothesis AliceInputsView_indep_V2 :
  P |= AliceInputsView _|_ V2.

Definition DSDP_RV (inputs : dsdp_random_inputs) :
  {RV P -> dsdp_tracesT} :=
    dsdp_uncurry `o
    [% Dk_a, Dk_b, Dk_c, V1, V2, V3, U1, U2, U3, R2, R3].

Section alice_privacy_analysis.

Local Notation m := m_minus_2.+2.

Let AliceTraces : {RV P -> dsdp_traceT} :=
      (fun t => tnth t 0) `o DSDP_RV inputs.

(* E_charlie_v3 means it is encrypted (so generated) by the key of charlie.
   Therefore, encrypted RVs should be independent of other parties.
   Even other parties can add messages by HE properties, but addition to a RV
   means the independence keeps after the addition.
*)
Hypothesis inde_Echarlie : P |= AliceInputsView _|_ E_charlie_v3.
Hypothesis inde_Ebob : P |= AliceInputsView _|_ E_bob_v2.

Let alice_view_valuesT := (Alice.-key Dec msg * msg * msg * msg * msg * msg *
  msg * msg * Alice.-enc msg * Charlie.-enc msg * Bob.-enc msg)%type.

Let AliceView : {RV P -> alice_view_valuesT} :=
  [% Dk_a, S, V1, U1, U2, U3, R2, R3, E_alice_d3, E_charlie_v3, E_bob_v2].

Let AliceTraces_values_from_view
  (v : alice_view_valuesT) : 15.-bseq _ :=
    let '(dk_a, s, v1 , u1, u2, u3, r2, r3,
      E_alice_d3, E_charlie_v3, E_bob_v2) := v in
    [bseq d s;
            e (E_alice_d3 : enc);
            e (E_charlie_v3 : enc);
            e (E_bob_v2 : enc);
            d r3; d r2; d u3; d u2; d u1; d v1; k (dk_a : pkey)].

Lemma AliceTraces_from_viewP :
  AliceTraces = AliceTraces_values_from_view `o AliceView.
Proof.
apply: boolp.funext => x /=.
rewrite /AliceTraces /DSDP_RV /comp_RV /= dsdp_traces_ok //=.
have Ha : dsdp_program.k (Alice, Dec, (Dk_a x).2) = k (Dk_a x).
  (* Rocq doesn't know this is the only case, and it makes both sides equal*)
  by case: Dk_a => t. 
rewrite  -[in RHS]Ha //=.
Qed.

Local Definition AliceView_values_from_trace (xs : dsdp_traceT) :
  alice_view_valuesT :=
    let failtrace := (KeyOf Alice Dec 0,
                        0, 0, 0, 0, 0, 0, 0,
                        E' Alice 0, E' Charlie 0, E' Bob 0) in
    if xs is Bseq [:: inl (inl s);
           inl (inr E_alice_d3);
           inl (inr E_charlie_v3);
           inl (inr E_bob_v2);
           inl (inl r3); inl (inl r2); inl (inl u3);
           inl (inl u2); inl (inl u1); inl (inl v1); inr dk_a] _
    then 
         if (E_alice_d3, E_charlie_v3, E_bob_v2, dk_a) is
              ((Alice, d3), (Charlie, v3), (Bob, v2), (Alice, Dec, k_a)) then
            (KeyOf Alice Dec k_a, s, v1 , u1, u2, u3, r2, r3,
               E' Alice d3, E' Charlie v3, E' Bob v2)
         else failtrace
    else failtrace.

Lemma AliceView_values_from_traceP:
   cancel AliceTraces_values_from_view AliceView_values_from_trace.
Proof.
move => [] [] [] [] [] [] [] [] [] [] dk ? ? ? ? ? ? ? a c b //=.
case: a => -[a ma] /=.  (* msg from `case: a`
                           can be case again to get 1. nat a 2. nat a < m*)
case: c => -[c mc] /=.
case: b => -[b mb] /=.
case: dk => -[dk mdk] /=.
by [].
Qed.

Lemma ce_AliceTraces_AliceView (w : finType) (v : {RV P -> w}) :
  `H(v | AliceTraces ) = `H(v | AliceView ).
Proof.
simpl in *.
transitivity (`H(v | [% AliceTraces, AliceView])).
  have -> : AliceView = AliceView_values_from_trace `o AliceTraces.
    by apply: boolp.funext => x /= ;
       rewrite AliceTraces_from_viewP /comp_RV AliceView_values_from_traceP.
  by rewrite centropy_RV_contraction.
by rewrite AliceTraces_from_viewP centropyC centropy_RV_contraction.
Qed.

Local Definition Dec_view : {RV P -> (alice_inputsT * msg)} :=
  [% Dk_a, S, V1, U1, U2, U3, R2, R3].
Local Definition Eqn1_view :
  {RV P -> (alice_inputsT * msg * Alice.-enc msg * Charlie.-enc msg)}
  := [% Dec_view, E_alice_d3, E_charlie_v3].
Local Definition Eqn2_view :
  {RV P -> (alice_inputsT * msg * Alice.-enc msg)} :=
  [% Dec_view, E_alice_d3].
 
Hypothesis Pr_AliceView_neq0 :
    forall
      (x : alice_inputsT * msg * Alice.-enc msg * Charlie.-enc 'I_m)
      (e : Bob.-enc 'I_m),
    `Pr[ [% Dec_view, E_alice_d3, E_charlie_v3, E_bob_v2] = (x, e) ] != 0.

Hypothesis Pr_Eqn1View_neq0 :
    forall
      (x : alice_inputsT * msg * Alice.-enc msg)
      (e : Charlie.-enc 'I_m),
    `Pr[ [% Dec_view, E_alice_d3, E_charlie_v3] = (x, e) ] != 0.

Hypothesis Pr_Eqn2View_neq0 :
  forall
    (x : (alice_inputsT * msg))
    (e : Alice.-enc msg),
  `Pr[ [% Dec_view, E_alice_d3] = (x, e) ] != 0.

(* Since `AliceInputView` are generated by Alice,
   while `v2` is generated by Bob *)
Hypothesis AliceInputView_indep_V2 :
  P |= AliceInputsView _|_ V2.

Section dotp2.

Notation "x \+ y" := (add_RV x y).  

Definition dotp2 (x y: (msg * msg)) := x.1 * y.1 + x.2 * y.2.

Definition dotp2_solutions (s : msg) : {set (msg * msg) * (msg * msg)} :=
  [set uv in setT `* setT | dotp2 uv.1 uv.2 == s].

Definition Dotp2_rv (X Y : {RV P -> (msg * msg)}) : {RV P -> msg} :=
  fun p => dotp2 (X p) (Y p).

Definition Dotp2Solutions
  (S : {RV P -> msg}) : {RV P -> {set (msg * msg) * (msg * msg)} } :=
  dotp2_solutions `o S.

Definition US := [% U2, U3].
Definition VS := [% V2, V3].

Definition ConstUS := [% (fun _ => 1):{RV P -> msg}, (fun _ => 0):{RV P -> msg}].
Definition VU1 : {RV P -> msg} := V1 \* U1.

Lemma S_alt :
  S = Dotp2_rv VS US \+ VU1.
Proof.
rewrite /S /VS /US /D3 /VU3R /D2 /VU3 /VU2 /VU1 /Dotp2_rv /dotp2 /add_RV.
apply: boolp.funext => i //=.
ring.
Qed.

Lemma S_alt2 :
  let f := (fun o => let '(u2, u3, v2, v3, v1, u1) := o
              in u2 * v2 + u3 * v3 + v1 * u1) in
  S = f `o [% U2, U3, V2, V3, V1, U1].
Proof.
rewrite /comp_RV /S /VS /US /D3 /VU3R /D2 /VU3 /VU2 /VU1 /Dotp2_rv /dotp2 /add_RV.
apply: boolp.funext => i //=.
ring.
Qed.

End dotp2.

Section malicious_adversary_case_analysis.

(* If an active adversary controls Alice, force `us` always output `(1, 0)`,
   then the key privacy premise `v2 _|_ dotp2_rv us vs` is impossible.

   In contrast, if Alice is an fair player, the probability that `us`
   outputs that specific value `(1, 0)` is 1/m^2.

   Finally, if Bob enforce ZPK check to abort the protocol when that value is
   generated, `v2 _|_ dotp2_rv us vs` is guaranteed, and the protocol
   is secure with that mitigation ("security with abort")
   \cite[\S5.2]{dumas2017dual}.

   Therefore, here we examine the compromised case:

      `us = (1, 0) -> ~ v2 _|_ dotp2_rv us vs`

   and the secure case:

      `us != (1, 0) ->  v2 _|_ dotp2_rv us vs`.
*)
Lemma ConstUS_is_V2_discloser :
  US = ConstUS -> Dotp2_rv VS US = V2.
Proof.
move->; rewrite /ConstUS /VS /Dotp2_rv /dotp2 /fst /snd /comp_RV.
apply: boolp.funext => i //=.
ring.
Qed.

(* This theorem shows that if an active adversary controls Alice,
   it can set U1 and U2 as a special combination (1, 0),
   which allows revealing `V2` from the result that Alice receives.
   \cite[\S5.2]{dumas2017dual}.
*)
Theorem if_US_are_compromised_V2_is_leaked :
  US = ConstUS -> ~ `H(V2 | AliceView ) = `H `p_V2.
Proof.
move => H.
(* From alice_view to [% Alice_input_view, S] *)
rewrite !(E_enc_ce_removal V2 card_msg).
pose h := (fun o : (Alice.-key Dec msg * msg *
  msg * msg * msg * msg * msg * msg) =>
  let '(dk_a, s, v1, u1, u2, u3, r2, r3) := o in
   (dk_a, v1, u1, u2, u3, r2, r3, s)).
pose h' := (fun o : (Alice.-key Dec msg * msg *
  msg * msg * msg * msg * msg * msg) =>
  let '(dk_a, v1, u1, u2, u3, r2, r3, s) := o in
  (dk_a, s, v1, u1, u2, u3, r2, r3)).
rewrite -(centropy_RV_contraction _ _ h).
have ->: `H( V2 | [% Dk_a, S, V1, U1, U2, U3, R2, R3, h `o
  [% Dk_a, S, V1, U1, U2, U3, R2, R3]]) =
  `H( V2 | [% Dk_a, S, V1, U1, U2, U3, R2, R3,
  [% Dk_a, V1, U1, U2, U3, R2, R3, S]]).
  by [].
rewrite centropyC (centropy_RV_contraction _ _ h') -/AliceInputsView.
(* From the cond_entropy to the independence goal via mutual info *)
move => H2.
have: `I(V2;[% AliceInputsView, S]) = 0.
  by rewrite mutual_info_RVE H2 subrr.
move/mutual_info_RV0_indep.
(* Show the independence is impossible if Alice has been compromised
   and cheat with the specific `us`*)
rewrite S_alt /add_RV //= (ConstUS_is_V2_discloser H).
pose z := (fun o : (alice_inputsT * msg) =>
  let '(_, v1, u1, _, _, _, _, v2_r) := o in v2_r - v1 * u1).
move/(inde_RV_comp idfun z).
have -> : z `o [% AliceInputsView, V2 \+ VU1] = V2.
  rewrite /z /VU1 /comp_RV /add_RV.
  apply: boolp.funext => i //=.
  by ring.
have -> : idfun `o V2 = V2.
  by apply: boolp.funext => i.
exact: neg_self_indep.
exact: Pr_Eqn2View_neq0.
exact: Pr_Eqn1View_neq0.
exact: Pr_AliceView_neq0.
Qed.

End malicious_adversary_case_analysis.

Section semi_honest_case_analysis.

Section bonded_leakage_privacy.

(* The constraint function: given v2, s, u2, u3, compute v3 *)
Definition compute_v3 (o : (msg * msg * msg * msg * msg * msg)) : msg :=
  let '(v1_val, u1_val, u2_val, u3_val, s_val, v2_val) := o in
    (s_val - u2_val * v2_val) / u3_val - u1_val * v1_val.  (* assuming u3 ≠ 0 *)

Hypothesis V3_determined : 
  V3 = compute_v3 `o [% V1, U1, U2, U3, S, V2].

(** * Fundamental Principle of Constraint-Based Security
    
    When an auxiliary variable is functionally determined by a secret
    and a constraint, the joint entropy equals the secret's entropy alone.
    This formalizes the principle that "knowing possible solution pairs
    gives exactly the same information as knowing the constraint on the secret."
    
    This principle underlies many MPC protocols where:
    - [V2] is the secret to protect
    - [V3] is an auxiliary/helper variable
    - [S, U2, U3] form a constraint linking them
    - Given constraint, [v3] is determined by [V2] (or vice versa)
*)
Lemma determined_auxiliary_adds_no_information_v2 :
  `H([% V2, V3] | [% V1, U1, U2, U3, S]) = `H(V2 | [% V1, U1, U2, U3, S]).
Proof.
have ->: `H([% V2, V3] | [% V1, U1, U2, U3, S]) =
  `H([% V1, U1, U2, U3, S], [% V2, V3]) - `H `p_ [% V1, U1, U2, U3, S].
  by rewrite chain_rule_RV addrAC subrr add0r.
rewrite V3_determined.
have ->: `H([% V1, U1, U2, U3, S],
    [% V2, compute_v3 `o [% V1, U1, U2, U3, S, V2]]) =
  `H `p_[% V1, U1, U2, U3, S, V2].
  by rewrite joint_entropy_RVA joint_entropy_RV_comp.
have ->: `H( V2 | [% V1, U1, U2, U3, S]) =
  `H([% V1, U1, U2, U3, S], V2) - `H `p_ [% V1, U1, U2, U3, S].
  by rewrite chain_rule_RV addrAC subrr add0r.
by [].
Qed.

End bonded_leakage_privacy.

Let f := fun o :
  (Alice.-key Dec msg * msg * msg * msg * msg * msg * msg * msg) =>
    let '(dk_a, v1, u1, u2, u3, r2, r3, s) := o in
         ((dk_a, v1, u1, u2, u3, r2, r3), s). 

Let comp_aiv_dotp2:
  f `o [% Dk_a, V1, U1, U2, U3, R2, R3, Dotp2_rv VS US `+ VU1] =
    [% AliceInputsView, Dotp2_rv VS US `+ VU1].
Proof. rewrite /comp_RV. apply: boolp.funext => _ //=. Qed.

Section perm_helpers.
  
(* TODO: define ring structure for boolean and use `ring` tactic
   to avoid all these issues from the `reindex`.
*)
Lemma bool8_perm 
    {T0 : finType} {P0 : R.-fdist T0}
    {TDK0 TV0 TU0 : finType}
    (dka0 : {RV P0 -> TDK0}) (s0 v10 u10 u20 u30 r20 r30 : {RV P0 -> TV0})
    (u0 : T0)
    (dka0' : TDK0) (r30' s0' v10' u10' u20' u30' r20' : TV0) :
  (dka0 u0 == dka0') && (s0 u0 == r30') && (v10 u0 == u10') && 
  (u10 u0 == u20') && (u20 u0 == u30') && (u30 u0 == r20') && 
  (r20 u0 == s0') && (r30 u0 == v10') =
  (dka0 u0 == dka0') && (r20 u0 == s0') && (r30 u0 == v10') && 
  (v10 u0 == u10') && (u10 u0 == u20') && (u20 u0 == u30') && 
  (u30 u0 == r20') && (s0 u0 == r30').
Proof.
by case: (dka0 u0 == dka0'); case: (s0 u0 == r30'); case: (v10 u0 == u10');
   case: (u10 u0 == u20'); case: (u20 u0 == u30'); case: (u30 u0 == r20');
   case: (r20 u0 == s0'); case: (r30 u0 == v10').
Qed.

Lemma bool8_flat
    {T0 : finType} {P0 : R.-fdist T0}
    {TDK0 TV0 : finType}
    (dka0 : {RV P0 -> TDK0}) 
    (s0 v10 u10 u20 u30 r20 r30 : {RV P0 -> TV0})
    (u0 : T0)
    (dka0' : TDK0) (r20' r30' v10' u10' u20' u30' s0' : TV0) :
  (dka0 u0 == dka0') && (r20 u0 == r20') && (r30 u0 == r30') && 
  (v10 u0 == v10') && (u10 u0 == u10') && (u20 u0 == u20') && 
  (u30 u0 == u30') && (s0 u0 == s0') =
  [&& (dka0 u0 == dka0') && (r20 u0 == r20') && (r30 u0 == r30'),
      (v10 u0 == v10') && (u10 u0 == u10') && (u20 u0 == u20') && 
      (u30 u0 == u30')
    & s0 u0 == s0'].
Proof.
by case: (dka0 u0 == dka0'); case: (r20 u0 == r20'); case: (r30 u0 == r30');
   case: (v10 u0 == v10'); case: (u10 u0 == u10'); case: (u20 u0 == u20');
   case: (u30 u0 == u30'); case: (s0 u0 == s0').
Qed.

Lemma bool9_perm
    {T0 : finType} {P0 : R.-fdist T0}
    {TA0 TDK0 TV0 : finType}
    (v0 : {RV P0 -> TA0})
    (dka0 : {RV P0 -> TDK0}) 
    (s0 v10 u10 u20 u30 r20 r30 : {RV P0 -> TV0})
    (u0 : T0)
    (a0 : TA0)
    (dka0' : TDK0) (r30' s0' v10' u10' u20' u30' r20' : TV0) :
  [&& v0 u0 == a0,
      (dka0 u0 == dka0') && (s0 u0 == r30') && (v10 u0 == u10') && 
      (u10 u0 == u20') && (u20 u0 == u30') && (u30 u0 == r20') && 
      (r20 u0 == s0')
    & r30 u0 == v10'] =
  [&& v0 u0 == a0,
      (dka0 u0 == dka0') && (r20 u0 == s0') && (r30 u0 == v10') && 
      (v10 u0 == u10') && (u10 u0 == u20') && (u20 u0 == u30') && 
      (u30 u0 == r20')
    & s0 u0 == r30'].
Proof.
by case: (v0 u0 == a0); 
   case: (dka0 u0 == dka0'); case: (s0 u0 == r30'); case: (v10 u0 == u10');
   case: (u10 u0 == u20'); case: (u20 u0 == u30'); case: (u30 u0 == r20');
   case: (r20 u0 == s0'); case: (r30 u0 == v10').
Qed.

Lemma bool9_regroup
    {T0 : finType} {P0 : R.-fdist T0}
    {TA0 TDK0 TV0 : finType}
    (v0 : {RV P0 -> TA0})
    (dka0 : {RV P0 -> TDK0}) 
    (s0 v10 u10 u20 u30 r20 r30 : {RV P0 -> TV0})
    (u0 : T0)
    (a0 : TA0)
    (dka0' : TDK0) (r20' r30' v10' u10' u20' u30' s0' : TV0) :
  [&& v0 u0 == a0,
      (dka0 u0 == dka0') && (r20 u0 == r20') && (r30 u0 == r30') && 
      (v10 u0 == v10') && (u10 u0 == u10') && (u20 u0 == u20') && 
      (u30 u0 == u30')
    & s0 u0 == s0'] =
  [&& v0 u0 == a0, 
      (dka0 u0 == dka0') && (r20 u0 == r20') && (r30 u0 == r30'),
      (v10 u0 == v10') && (u10 u0 == u10') && (u20 u0 == u20') && 
      (u30 u0 == u30')
    & s0 u0 == s0'].
Proof.
by case: (v0 u0 == a0);
   case: (dka0 u0 == dka0'); case: (r20 u0 == r20'); case: (r30 u0 == r30');
   case: (v10 u0 == v10'); case: (u10 u0 == u10'); case: (u20 u0 == u20');
   case: (u30 u0 == u30'); case: (s0 u0 == s0').
Qed.

End perm_helpers.

Hypothesis cinde_V2V3 :
  P |= [% Dk_a, R2, R3] _|_ [% V2, V3] | [% V1, U1, U2, U3, S].

Hypothesis cinde_V2 :
  P |= [% Dk_a, R2, R3] _|_ V2 | [% V1, U1, U2, U3, S].

Hypothesis V3_determined : 
  V3 = compute_v3 `o [% V1, U1, U2, U3, S, V2].

Lemma privacy_by_bonded_leakage :
  `H([% V2, V3] | AliceView ) = `H(V2 | AliceView).
Proof.
set OtherAlice : {RV P -> (Alice.-key Dec msg) * msg * msg} :=
  [% Dk_a, R2, R3].
have H: forall V, `H(V | AliceView ) =
    `H(V | [% OtherAlice, V1, U1, U2, U3, S] ).
  move => t V.
  rewrite /OtherAlice /AliceView.
  rewrite !(E_enc_ce_removal V card_msg); last first.
    exact: Pr_AliceView_neq0; last first.
    exact: Pr_Eqn1View_neq0; last first.
    exact: Pr_Eqn2View_neq0.
  have H_reorder: `H( V | [% Dk_a, S, V1, U1, U2, U3, R2, R3]) =
    `H( V | [% Dk_a, R2, R3, V1, U1, U2, U3, S]).
    rewrite /centropy_RV /centropy /= !snd_RV2.
    rewrite (reindex (fun '(dk_a', r2', r3', v1', u1', u2', u3', s') => 
                      (dk_a', s', v1', u1', u2', u3', r2', r3')))/=.
      apply: eq_bigr => [] [] [] [] [] [] [] []
        dk_a' s' v1' u1' u2' u3' r2' r3' _.
      congr (_ * _).
           rewrite !dist_of_RVE !pfwd1E; congr Pr; apply/setP => u;
           rewrite !inE /= !xpair_eqE. rewrite bool8_perm.
      rewrite /centropy1; congr (- _).
      rewrite /jcPr !snd_RV2.
      apply: eq_bigr => a _.
      rewrite /jcPr !setX1 !Pr_set1 !dist_of_RVE !pfwd1E.
      congr (_ * _).
        f_equal.
          by congr Pr; apply/setP => u; rewrite !inE /= !xpair_eqE;
             rewrite bool9_perm.
        by f_equal; congr Pr; apply/setP => u;
           rewrite !inE /= !xpair_eqE; rewrite bool8_perm.
      congr log.
        f_equal.
          by congr Pr; apply/setP => u; rewrite !inE /= !xpair_eqE;
             rewrite bool9_perm.
        f_equal.
        by congr Pr; apply/setP => u; rewrite !inE /= !xpair_eqE;
           rewrite bool8_perm.
      by exists (fun '(dk_a', s', v1', u1', u2', u3', r2', r3') =>
             (dk_a', r2', r3', v1', u1', u2', u3', s')) 
             => [] [] [] []  [] [] [] [] dk_a' v1' u1' r2' r3' u2' u3' s'.
    exact: H_reorder.
rewrite (H msg V2) (H (msg * msg)%type [% V2, V3]).
have H_assoc: forall V, `H(V | [% OtherAlice, V1, U1, U2, U3, S] ) =
    `H(V | [% OtherAlice, [%V1, U1, U2, U3, S]] ).
  move => t v.
  rewrite /centropy_RV /centropy /= !snd_RV2.
  rewrite (reindex (fun '(o, (v1, u1, u2, u3, s)) =>
                    (o, v1, u1, u2, u3, s))) /=.
    apply: eq_bigr => [] [] [] [] dk_a' r2' r3' [] [] [] [] v1' u1' u2' u3' s' _.
    congr (_ * _).
      rewrite !dist_of_RVE !pfwd1E.
      by congr Pr; apply/setP => u; rewrite !inE /= !xpair_eqE bool8_flat.
    rewrite /centropy1; congr (- _).
    rewrite /jcPr !snd_RV2.
    apply: eq_bigr => a _.
    rewrite /jcPr !setX1 !Pr_set1 !dist_of_RVE !pfwd1E.
    congr (_ * _).
      f_equal.
        by congr Pr; apply/setP => u; rewrite !inE /= !xpair_eqE bool8_flat.
      f_equal.
      by congr Pr; apply/setP => u; rewrite !inE /= !xpair_eqE bool8_flat.
    congr log.
    f_equal.
      by congr Pr; apply/setP => u; rewrite !inE /= !xpair_eqE bool9_regroup.
    f_equal.
    by congr Pr; apply/setP => u; rewrite !inE /= !xpair_eqE bool8_flat.
  exists (fun '(o, v1, u1, u2, u3, s) =>
             (o, (v1, u1, u2, u3, s))).
        - by move=> [] o [] [] [] [] a1 a2 a3 a4 a5.
        - by move=> [] [] [] [] [] [] [] [] a1 a2 a3 a4 a5 o1 o2 o3.
rewrite (H_assoc msg V2) (H_assoc (msg * msg)%type [% V2, V3]).
rewrite (cinde_centropy_eq cinde_V2V3).
rewrite (cinde_centropy_eq cinde_V2).
exact: determined_auxiliary_adds_no_information_v2.
Qed. (* TODO: opaque check takes very long. *)

End semi_honest_case_analysis.

End alice_privacy_analysis.

End dsdp_privacy_analysis.

